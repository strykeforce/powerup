package frc.team2767.subsystem.vision;

import edu.wpi.first.wpilibj.vision.VisionPipeline;
import java.util.ArrayList;
import java.util.List;
import org.opencv.core.*;
import org.opencv.imgproc.Imgproc;

/**
 * GripPipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripCode implements VisionPipeline {
  static {
    System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
  }

  // Outputs
  private Mat blurOutput = new Mat();
  private Mat hsvThresholdOutput = new Mat();
  private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
  private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();

  /** This is the primary method that runs the entire pipeline and updates the outputs. */
  @Override
  public void process(Mat source0) {
    // Step Blur0:
    Mat blurInput = source0;
    BlurType blurType = BlurType.get("Box Blur");
    double blurRadius = 14.414414414414415;
    blur(blurInput, blurType, blurRadius, blurOutput);

    // Step HSV_Threshold0:
    Mat hsvThresholdInput = blurOutput;
    double[] hsvThresholdHue = {27.51798561151079, 89.0909090909091};
    double[] hsvThresholdSaturation = {82.55395683453237, 199.19191919191917};
    double[] hsvThresholdValue = {0.0, 255.0};
    hsvThreshold(
        hsvThresholdInput,
        hsvThresholdHue,
        hsvThresholdSaturation,
        hsvThresholdValue,
        hsvThresholdOutput);

    // Step Find_Contours0:
    Mat findContoursInput = hsvThresholdOutput;
    boolean findContoursExternalOnly = false;
    findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

    // Step Filter_Contours0:
    ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
    double filterContoursMinArea = 4000.0;
    double filterContoursMinPerimeter = 0.0;
    double filterContoursMinWidth = 0.0;
    double filterContoursMaxWidth = 1000.0;
    double filterContoursMinHeight = 0.0;
    double filterContoursMaxHeight = 1000.0;
    double[] filterContoursSolidity = {0.0, 100.0};
    double filterContoursMaxVertices = 1000000.0;
    double filterContoursMinVertices = 0.0;
    double filterContoursMinRatio = 0.0;
    double filterContoursMaxRatio = 1000.0;
    filterContours(
        filterContoursContours,
        filterContoursMinArea,
        filterContoursMinPerimeter,
        filterContoursMinWidth,
        filterContoursMaxWidth,
        filterContoursMinHeight,
        filterContoursMaxHeight,
        filterContoursSolidity,
        filterContoursMaxVertices,
        filterContoursMinVertices,
        filterContoursMinRatio,
        filterContoursMaxRatio,
        filterContoursOutput);
  }

  /**
   * This method is a generated getter for the output of a Blur.
   *
   * @return Mat output from Blur.
   */
  public Mat blurOutput() {
    return blurOutput;
  }

  /**
   * This method is a generated getter for the output of a HSV_Threshold.
   *
   * @return Mat output from HSV_Threshold.
   */
  public Mat hsvThresholdOutput() {
    return hsvThresholdOutput;
  }

  /**
   * This method is a generated getter for the output of a Find_Contours.
   *
   * @return ArrayList<MatOfPoint> output from Find_Contours.
   */
  public ArrayList<MatOfPoint> findContoursOutput() {
    return findContoursOutput;
  }

  /**
   * This method is a generated getter for the output of a Filter_Contours.
   *
   * @return ArrayList<MatOfPoint> output from Filter_Contours.
   */
  public ArrayList<MatOfPoint> filterContoursOutput() {
    return filterContoursOutput;
  }

  /**
   * Softens an image using one of several filters.
   *
   * @param input The image on which to perform the blur.
   * @param type The blurType to perform.
   * @param doubleRadius The radius for the blur.
   * @param output The image in which to store the output.
   */
  private void blur(Mat input, BlurType type, double doubleRadius, Mat output) {
    int radius = (int) (doubleRadius + 0.5);
    int kernelSize;
    switch (type) {
      case BOX:
        kernelSize = 2 * radius + 1;
        Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
        break;
      case GAUSSIAN:
        kernelSize = 6 * radius + 1;
        Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
        break;
      case MEDIAN:
        kernelSize = 2 * radius + 1;
        Imgproc.medianBlur(input, output, kernelSize);
        break;
      case BILATERAL:
        Imgproc.bilateralFilter(input, output, -1, radius, radius);
        break;
    }
  }

  private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val, Mat out) {
    Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
    Core.inRange(out, new Scalar(hue[0], sat[0], val[0]), new Scalar(hue[1], sat[1], val[1]), out);
  }

  private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
    Mat hierarchy = new Mat();
    contours.clear();
    int mode;
    if (externalOnly) {
      mode = Imgproc.RETR_EXTERNAL;
    } else {
      mode = Imgproc.RETR_LIST;
    }
    int method = Imgproc.CHAIN_APPROX_SIMPLE;
    Imgproc.findContours(input, contours, hierarchy, mode, method);
  }

  private void filterContours(
      List<MatOfPoint> inputContours,
      double minArea,
      double minPerimeter,
      double minWidth,
      double maxWidth,
      double minHeight,
      double maxHeight,
      double[] solidity,
      double maxVertexCount,
      double minVertexCount,
      double minRatio,
      double maxRatio,
      List<MatOfPoint> output) {
    final MatOfInt hull = new MatOfInt();
    output.clear();
    // operation
    for (int i = 0; i < inputContours.size(); i++) {
      final MatOfPoint contour = inputContours.get(i);
      final Rect bb = Imgproc.boundingRect(contour);
      if (bb.width < minWidth || bb.width > maxWidth) continue;
      if (bb.height < minHeight || bb.height > maxHeight) continue;
      final double area = Imgproc.contourArea(contour);
      if (area < minArea) continue;
      if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
      Imgproc.convexHull(contour, hull);
      MatOfPoint mopHull = new MatOfPoint();
      mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
      for (int j = 0; j < hull.size().height; j++) {
        int index = (int) hull.get(j, 0)[0];
        double[] point = new double[] {contour.get(index, 0)[0], contour.get(index, 0)[1]};
        mopHull.put(j, 0, point);
      }
      final double solid = 100 * area / Imgproc.contourArea(mopHull);
      if (solid < solidity[0] || solid > solidity[1]) continue;
      if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount) continue;
      final double ratio = bb.width / (double) bb.height;
      if (ratio < minRatio || ratio > maxRatio) continue;
      output.add(contour);
    }
  }

  /**
   * An indication of which type of filter to use for a blur. Choices are BOX, GAUSSIAN, MEDIAN, and
   * BILATERAL
   */
  enum BlurType {
    BOX("Box Blur"),
    GAUSSIAN("Gaussian Blur"),
    MEDIAN("Median Filter"),
    BILATERAL("Bilateral Filter");

    private final String label;

    BlurType(String label) {
      this.label = label;
    }

    public static BlurType get(String type) {
      if (BILATERAL.label.equals(type)) {
        return BILATERAL;
      } else if (GAUSSIAN.label.equals(type)) {
        return GAUSSIAN;
      } else if (MEDIAN.label.equals(type)) {
        return MEDIAN;
      } else {
        return BOX;
      }
    }

    @Override
    public String toString() {
      return this.label;
    }
  }
}
